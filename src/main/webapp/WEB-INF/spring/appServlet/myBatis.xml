<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-2.0.xsd		
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd">
		
<!-- 	http://www.adictosaltrabajo.com/tutoriales/tutoriales.php?pagina=MybatisMavenSpring -->
<!-- 	http://www.adictosaltrabajo.com/tutoriales/tutoriales.php?pagina=spring_persistence -->
<!-- 	http://www.adictosaltrabajo.com/tutoriales/tutoriales.php?pagina=mybatis-generator-core -->

<!-- <beans:import resource="jdbc.properties"/>  -->

	<context:annotation-config />

<!-- 	<context:component-scan base-package="com.autentia.tutoriales" /> -->

	
	
	<!-- TRANSACCIONES CON ANOTACIONES -->
	<!-- http://www.javamexico.org/foros/java_enterprise/manejo_de_transacciones_en_hibernatespring -->
	<!-- http://www.javamexico.org/foros/java_enterprise/usar_el_abstract_factory_con_spring	 -->

    <!--Las transacciones seran declaradas usando la anotacion "@Transactional"  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>	

	<!-- TEMA PARA LEER SOBRE TRANSACCIONES -->
	<!-- 	http://edwin.baculsoft.com/2012/06/create-a-database-transaction-using-mybatis/ -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="mapperLocations"
			value="classpath:/com/personal/basket/dao/mybatis/*.xml" />
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="transactionFactory" ref="springManagedTransactionFactory" />
	</beans:bean>

	<beans:bean class="org.mybatis.spring.transaction.SpringManagedTransactionFactory" id="springManagedTransactionFactory">
		<beans:constructor-arg index="0" ref="dataSource" />
	</beans:bean>

<!-- ESTE ES DEL TIPO 1 -->
<!-- 	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" /> -->
<!-- 		<beans:property name="url" value="jdbc:mysql://localhost:3306/probasket" />  -->
<!-- 		<beans:property name="username" value="root" /> -->
<!-- 		<beans:property name="password" value="maguy22" /> -->
<!-- 	</beans:bean> -->

<!-- <beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<beans:property name="driverClassName" value="org.hsqldb.jdbcDriver" /> -->
<!-- 		<beans:property name="url" value="jdbc:hsqldb:hsql://localhost/testdb" /> -->
<!-- 		<beans:property name="username" value="sa" /> -->
<!-- 		<beans:property name="password" value="" />		 -->
<!-- </beans:bean> -->
    
	
<!-- ESTE ES DEL TIPO 3 -->
<!--     <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">   -->
<!-- 		<beans:property name="driverClassName" 	value="com.mysql.jdbc.Driver" /> -->
<!-- 		<beans:property name="url" 				value="jdbc:mysql://localhost:3306/probasket" /> -->
<!-- 		<beans:property name="username" 		value="root" /> -->
<!-- 		<beans:property name="password" 		value="maguy22" /> -->
<!--         <beans:property name="initialSize"  	value="6"/>   -->
<!--         <beans:property name="maxActive"    	value="10"/>   -->
<!--     </beans:bean>   -->
    
    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
		<beans:property name="driverClassName" 	value="org.hsqldb.jdbcDriver" />
		<beans:property name="url" 				value="jdbc:hsqldb:hsql://localhost/testdb" />
		<beans:property name="username" 		value="sa" />
		<beans:property name="password" 		value="" />
        <beans:property name="initialSize"  	value="6"/>  
        <beans:property name="maxActive"    	value="10"/>  
    </beans:bean>  


<!-- OPCIONES DE DATASOURCE  -->
<!-- OPCIONES DE DATASOURCE  -->
<!-- OPCIONES DE DATASOURCE  -->
<!-- OPCIONES DE DATASOURCE  -->
<!-- OPCIONES DE DATASOURCE  -->


<!--  TIPO1
        DataSource que trabaja directamente con el driver JDBC en donde cada vez que se CREA y devuelve una conexión distinta.  
        Es decir, no es un pool de conexiones en donde las conexiones están abiertas y preparadas para ser entregadas según  
        la aplicación lo va solicitando => El rendimiento baja considerablemente.  
          
        Le recomiendo que mire el siquiente tutorial:   
        http://www.adictosaltrabajo.com/tutoriales/tutoriales.php?pagina=pool_performance  
      
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <property name="driverClassName" value="${datasource.jdbcDriver}"/>  
        <property name="url"          value="${datasource.url}"/>  
        <property name="username"         value="${datasource.username}"/>  
        <property name="password"         value="${datasource.password}"/>  
    </bean>     
-->

<!--  TIPO2
        Igual que el anterior pero Singleton, es decir, siempre devuelve la misma conexión, así que el rendimiento aun bajará más, adiós a   
        usar transacciones, en aplicaciones servidoras o multihilo, etc...pero bueno, lo pongo por si alguna vez interesa.. para aplicaciones   
        sencillitas de escritorio está hasta bien :-)   
     
    <bean id="dataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource">  
        <property name="driverClassName" value="${datasource.jdbcDriver}"/>  
        <property name="url"          value="${datasource.url}"/>  
        <property name="username"         value="${datasource.username}"/>  
        <property name="password"         value="${datasource.password}"/>  
    </bean>  
--> 
 
<!--   TIPO3 (con pool de conexiones)
        DataSource que hace uso del famoso pool de conexiones DBCP (http://commons.apache.org/dbcp)       
        Nota: Normalmente, usará un DataSource creado por el servidor de aplicaciones y contenedor de servlet y accederá a el por JNDI.  
          
        Pero bueno nunca se sabe, para una aplicación de escritorio tipo servidor o cliente multihilo quizás sea interesante...  
        
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
        <property name="driverClassName" value="${datasource.jdbcDriver}"/>  
        <property name="url"          value="${datasource.url}"/>  
        <property name="username"         value="${datasource.username}"/>  
        <property name="password"         value="${datasource.password}"/>  

        <property name="initialSize"  value="6"/>  

        <property name="maxActive"        value="10"/>  
    </bean>  
-->

<!--   TIPO4
        DataSource al que accedemos a través de JNDI.  
        Como este ejemplo no corre sobre un servidor de aplicaciones... lo comentamos para que no falle  
        la inicialización de Spring, lo dejo comentado a modo didáctico       
          
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName" value="${datasource.jndiName}"/>  
    </bean>  
-->  
    
<!-- Mapeo de las tablas -->
<!-- Mapeo de las tablas -->
<!-- Mapeo de las tablas -->
<!-- Mapeo de las tablas -->
<!-- Mapeo de las tablas -->
	

	<beans:bean id="configuracionMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.ConfiguracionMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>
	
	<beans:bean id="menuMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.MenuMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>

	<beans:bean id="usuarioMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.UsuarioMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>

	<beans:bean id="economiaMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.EconomiaMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>
	
	<beans:bean id="detEconomiaMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.DetEconomiaMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	
	
	<beans:bean id="ligaMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.LigaMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	

	<beans:bean id="equipoMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.EquipoMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	

	<beans:bean id="nacionalidadMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.NacionalidadMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	

	<beans:bean id="operacionMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.OperacionMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	
	
	<beans:bean id="roleMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.RoleMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	
	
	<beans:bean id="equipoRealMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.EquipoRealMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	
		
	<beans:bean id="jugadorRealMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.JugadorRealMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	
	
	<beans:bean id="ligaJugadorMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.LigaJugadorMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	

	<beans:bean id="ligaJugadorJoinJugadorMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.LigaJugadorJoinJugadorMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	

	<beans:bean id="draftMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.DraftMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	

	<beans:bean id="draftTurnoMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface" value="com.personal.basket.dao.DraftTurnoMapper" />
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	

	
	
</beans:beans>
